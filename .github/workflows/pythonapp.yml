# https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions
name: Python Application

# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
on:
  push:
    paths-ignore::
    - "docs/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1 # https://github.com/actions/checkout
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=42 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install pytest pytest-mock
        pytest -v
    - name: Deployment
      env:
        OPENWEATHER_KEY: ${{secrets.OPENWEATHER_KEY}}
        WUNDERGROUND_KEY: ${{secrets.WUNDERGROUND_KEY}}
        YANDEX_VOICE_KEY: ${{secrets.YANDEX_VOICE_KEY}}
        GITHUB_TOKEN: ${{secrets.TOKEN}}  
      run: |
        echo Deployment
        # Ensure that the GITHUB_TOKEN secret is included
        # if [[ -z "$GITHUB_TOKEN" ]]; then
        #   echo "Set the GITHUB_TOKEN env variable."
        #   exit 1
        # fi
        # echo $GITHUB_TOKEN
        # echo $OPENWEATHER_KEY
        # echo $WUNDERGROUND_KEY
        # echo $YANDEX_VOICE_KEY
        # echo $HOME
        # echo $GITHUB_WORKFLOW
        # echo $GITHUB_ACTION
        # echo $GITHUB_ACTIONS
        # echo $GITHUB_ACTOR
        # echo $GITHUB_REPOSITORY
        # echo $GITHUB_EVENT_NAME
        # echo $GITHUB_EVENT_PATH
        # echo $GITHUB_WORKSPACE
        # echo $GITHUB_SHA
        # echo $GITHUB_REF
        # echo $GITHUB_HEAD_REF
        # echo $GITHUB_BASE_REF
    - name: Build project # This would actually build your project, using zip for an example artifact
      env:
        OPENWEATHER_KEY: ${{secrets.OPENWEATHER_KEY}}
        WUNDERGROUND_KEY: ${{secrets.WUNDERGROUND_KEY}}
        YANDEX_VOICE_KEY: ${{secrets.YANDEX_VOICE_KEY}}
      run: |
        # # zip --junk-paths my-artifact README.md
        # # setting.ini
        # sed -i -e 's/<OPENWEATHERMAP_KEY>/'${OPENWEATHER_KEY}'/g' setting.ini
        # sed -i -e 's/<YANDEXVOICE_KEY>/'${YANDEX_VOICE_KEY}'/g' setting.ini
        # sed -i -e 's/<WUNDERGROUND_KEY>/'${WUNDERGROUND_KEY}'/g' setting.ini
        # # setting_opiwin.ini
        # sed -i -e 's/<OPENWEATHERMAP_KEY>/'${OPENWEATHER_KEY}'/g' setting_opiwin.ini
        # sed -i -e 's/<YANDEXVOICE_KEY>/'${YANDEX_VOICE_KEY}'/g' setting_opiwin.ini
        # sed -i -e 's/<WUNDERGROUND_KEY>/'${WUNDERGROUND_KEY}'/g' setting_opiwin.ini
        # # setting_rasppi.ini
        # sed -i -e 's/<OPENWEATHERMAP_KEY>/'${OPENWEATHER_KEY}'/g' setting_rasppi.ini
        # sed -i -e 's/<YANDEXVOICE_KEY>/'${YANDEX_VOICE_KEY}'/g' setting_rasppi.ini
        # sed -i -e 's/<WUNDERGROUND_KEY>/'${WUNDERGROUND_KEY}'/g' setting_rasppi.ini
        # # setting_win.ini
        # sed -i -e 's/<OPENWEATHERMAP_KEY>/'${OPENWEATHER_KEY}'/g' setting_win.ini
        # sed -i -e 's/<YANDEXVOICE_KEY>/'${YANDEX_VOICE_KEY}'/g' setting_win.ini
        # sed -i -e 's/<WUNDERGROUND_KEY>/'${WUNDERGROUND_KEY}'/g' setting_win.ini
        # # zip
        # zip build -R ext modules music weather "*.py" "*.ini" "*.sh" "*.cmd" "*.txt" "*.mp3" "*.png" ".gif" -x test/*
        sh ./scripts/zip.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4   # https://github.com/actions/create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2 # https://github.com/actions/upload-release-asset/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build.zip
        asset_name: build.zip
        asset_content_type: application/zip
